name: Deploy Sistema Sentinela

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Testes e Qualidade
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Instalar depend칡ncias
      run: npm ci
      
    - name: Executar linter
      run: npm run lint
      
    - name: Executar testes
      run: npm run test
      
    - name: Build da aplica칞칚o
      run: npm run build
      
    - name: Upload dos artefatos de build
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    name: An치lise de Seguran칞a
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      
    - name: Executar Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    name: Build Docker Image
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login no Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-docker]
    name: Deploy Staging
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
        
    - name: Deploy para staging
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/sentinela
          
          # Backup antes do deploy
          ./scripts/deploy.sh backup
          
          # Atualizar c칩digo
          git pull origin main
          
          # Configurar vari치veis de ambiente
          echo "VITE_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}" > .env
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}" >> .env
          echo "NODE_ENV=staging" >> .env
          
          # Executar deploy
          ./scripts/deploy.sh deploy --clean
        EOF
        
    - name: Verificar deploy staging
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        
    - name: Notificar Slack (Staging)
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    name: Deploy Production
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Deploy para produ칞칚o
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/sentinela
          
          # Backup antes do deploy
          ./scripts/deploy.sh backup
          
          # Atualizar c칩digo
          git pull origin production
          
          # Configurar vari치veis de ambiente
          echo "VITE_SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }}" > .env
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.PRODUCTION_REDIS_PASSWORD }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "VITE_APP_ENV=production" >> .env
          
          # Executar deploy
          ./scripts/deploy.sh deploy --clean
        EOF
        
    - name: Verificar deploy produ칞칚o
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        
    - name: Executar testes de smoke
      run: |
        # Testes b치sicos de funcionalidade
        curl -f ${{ secrets.PRODUCTION_URL }}/ || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        
    - name: Notificar Slack (Production)
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        
    - name: Criar release no GitHub
      if: success() && github.ref == 'refs/heads/production'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Deploy autom치tico para produ칞칚o
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Autor:** ${{ github.actor }}
          
          **Altera칞칫es:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  rollback:
    runs-on: ubuntu-latest
    name: Rollback
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    needs: [deploy-staging, deploy-production]
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ github.ref == 'refs/heads/production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
        
    - name: Executar rollback
      run: |
        HOST=${{ github.ref == 'refs/heads/production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
        USER=${{ github.ref == 'refs/heads/production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
        
        ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          cd /opt/sentinela
          ./scripts/deploy.sh rollback
        EOF
        
    - name: Notificar rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '游뚿 Rollback executado devido a falha no deploy'