version: '3.8'

services:
  # Aplicação Frontend
  sentinela-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sentinela-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - sentinela-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sentinela.rule=Host(`localhost`)"
      - "traefik.http.services.sentinela.loadbalancer.server.port=80"

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sentinela-postgres
    environment:
      POSTGRES_DB: sentinela_db
      POSTGRES_USER: sentinela_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sentinela_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sentinela-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinela_user -d sentinela_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: sentinela-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sentinela_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sentinela-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx como proxy reverso (opcional)
  nginx-proxy:
    image: nginx:alpine
    container_name: sentinela-proxy
    ports:
      - "8080:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
    networks:
      - sentinela-network
    restart: unless-stopped
    depends_on:
      - sentinela-app
    profiles:
      - proxy

  # Monitoramento com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinela-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sentinela-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: sentinela-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sentinela-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  sentinela-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local